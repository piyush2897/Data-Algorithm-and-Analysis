
#include<stdio.h>
struct node{
    int data;
    struct node *left;
    struct node *right;
};
void inOrder(struct node* root)
{
   // printf("Started InOrder\n")
    if(root==NULL)
        return ;
    inOrder(root->left);
    printf("%d ",root->data);
    inOrder(root->right);
    return ;
}
struct node* newNode(int value)
{
    struct node *root=(struct node*)malloc(sizeof(struct node));
    root->data=value;
    root->left=NULL;
    root->right=NULL;
    return root;
}
struct node* insertNode(struct node** root,int value)
{
    if((*root)==NULL)
        return newNode(value);
    if(value > (*root)->data)
    {
        (*root)->right=insertNode(&(*root)->right,value);
    }
    else
    {
        (*root)->left=insertNode(&(*root)->left,value);
    }
    return *root;
}
void createTree(struct node** root,int value)
{
    //printf("Create Tree started\n");
    printf("Tree Creation Initiated\n");
    if((*root)==NULL)
    {

        (*root)=newNode(value);
        //printf("%d",(*root)->data);
    }
    return ;
}
int searching(struct node* root,int value)
{
    if(root==NULL)
        return 0;
    if(root->data < value)
        searching(root->right,value);
    else if(root->data > value)
        searching(root->left,value);
    else
        return 1;
}
int main()
{
    struct node *root=NULL;
    int n,c=0,i,value,k;
    printf("ENTER \n1 FOR CREATION \n2 FOR INSERTION \n3 FOR INORDER TRAVERSAL \n4 SERCHING \n");
    while(1)
    {
        printf("Enter Choice\n");
        scanf("%d",&k);
        switch(k)
        {
            case 1:
                printf("Enter Root data\n");
                scanf("%d",&value);
                createTree(&root,value);
            case 2:
                printf("Enter the Number of Nodes to be inserted\n");
                    scanf("%d",&n);
                for(i=0;i<n;i++)
                {
                    scanf("%d",&value);
                    insertNode(&root,value);
                }
                printf("Inorder Treversal\n");
                inOrder(root);
                printf("\n");
                break;
            case 3:
                printf("Inorder Treversal\n");
                inOrder(root);
                printf("\n");
                break;
            case 4:
                printf("Enter the value to be searched\n");
                scanf("%d",&value);
                if(searching(root,value)==1)
                {
                    printf("The Node is Present\n");
                }
                else
                {
                    printf("The Node is Not Present\n");
                }
                break;
            default:
                printf("EXIT");
                return 0;
        }
    }
    return 0;
}
createBST.c
Open with
Displaying createBST.c.
